using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace Mandelbrot
{
	public partial class FormMandelbrot : Form
		{
		protected int mx0, my0;  // where the mouse down was clicked
		protected int mx1, my1;  // where the mouse was released
		protected Boolean isMouseDown = false;
		protected double cx0, cx1, cy0, cy1;   // the part of the mandelbrot set we will draw
		protected Bitmap bMap;                 // the bmap we draw to, to avoid flicker
		protected Bitmap bMapSaved;            // a copy of the current mandelbrot picture, also to help stop flickering
		protected Boolean doDrawMandelbrot = true;  // should we draw the mandelbrot on this paint?
		
		public FormMandelbrot()
		{
			InitializeComponent();

			cx0 = -2.0;  // these values show the full mandelbrot set
			cx1 = 0.5;
			cy0 = -1.15;
			cy1 = 1.15;

			bMap = new Bitmap(panelMain.Width, panelMain.Height); // where we store the panel background
		}

		// draw the currently selected mandelbrot section
		private void buttonDraw_Click(object sender, EventArgs e)
		{
			doDrawMandelbrot = true;
			panelMain.Refresh();
		}

		// convert a hsv color to a rgb colour
		// hue must be from 0 to 360
		protected Color ColorFromHSV(double hue, double saturation, double value)
		{
			int hi = Convert.ToInt32(Math.Floor(hue / 60)) % 6;
			double f = hue / 60 - Math.Floor(hue / 60);

			value = value * 255;
			int v = Convert.ToInt32(value);
			int p = Convert.ToInt32(value * (1 - saturation));
			int q = Convert.ToInt32(value * (1 - f * saturation));
			int t = Convert.ToInt32(value * (1 - (1 - f) * saturation));

			if (hi == 0)
				return Color.FromArgb(255, v, t, p);
			else if (hi == 1)
				return Color.FromArgb(255, q, v, p);
			else if (hi == 2)
				return Color.FromArgb(255, p, v, t);
			else if (hi == 3)
				return Color.FromArgb(255, p, q, v);
			else if (hi == 4)
				return Color.FromArgb(255, t, p, v);
			else
				return Color.FromArgb(255, v, p, q);
		}

		// convert how long it took to bail out into a pretty colour
		// this function smooths out the colours chosen. if you just pick a colour using i it is very banded.
		// this math smoothly spreads the colours over the expected values returned, and uses the radius that we escaped at
		// as well as the iteration we bailed out at
		private Color MapColor(int i, double r, double c)
		{
			double di=(double )i;
			double zn;
			double hue;

				zn = 100;//Math.Sqrt(r + c);
				hue = di + 1.0 - Math.Log(Math.Log(Math.Abs(zn))) / Math.Log(2.0);  // 2 is escape radius
				hue = 0.95 + 20.0 * hue; // adjust to make it prettier
				// the hsv function expects values from 0 to 360
				while (hue > 360.0)
					hue -= 360.0;
				while (hue < 0.0)
					hue += 360.0;

				return ColorFromHSV(hue, 0.8, 1.0);
		}

		// classic, vanilla, mandelbrot code
		// cxMin etc... is the part of the mandelbrot we are going draw, will be scaled to the current pictureBox
		// the whole mandelbrot fits in x -2 to 0.5 y -1 to +1
		private void DrawMandelbrot(ref double cxMin, ref double cyMin, ref double cxMax, ref double cyMax, Graphics g)
		{
		int ix, iy;  // where we draw a pixel
		double pixelWidth;
		double pixelHeight;
		double cx, cy;
		double zx, zy;
		double zx2, zy2; // squared
		int i;
		int iterationMax = 255*3; // hmmm...
		double escapeRadius = 2.0;
		double er2 = escapeRadius * escapeRadius;
		SolidBrush sbBlack = new SolidBrush(Color.Black);
		SolidBrush[] sbA=new SolidBrush[iterationMax];
		for(i=0;i<iterationMax;i++)sbA[i]=new SolidBrush(MapColor(i, 0, 0));

		//Adjust aspect ratio
		double AspectRatio=(double)panelMain.Width/(double)panelMain.Height;
		if ((cxMax-cxMin)<(cyMax-cyMin)*AspectRatio)
		     {cxMin=(cxMax+cxMin-(cyMax-cyMin)*AspectRatio)/2.0; cxMax=cxMin+(cyMax-cyMin)*AspectRatio;}
		else {cyMin=(cyMax+cyMin-(cxMax-cxMin)/AspectRatio)/2.0; cyMax=cyMin+(cxMax-cxMin)/AspectRatio;}

			Cursor.Current = Cursors.WaitCursor;

			// scale it to our current window and section to draw
			pixelWidth = (cxMax - cxMin) / (double)panelMain.Width;
			pixelHeight = (cyMax - cyMin) / (double)panelMain.Height;
		
			for ( iy=0; iy < panelMain.Height; iy++ ) {
				cy = cyMin + (double)iy * pixelHeight;
				if (Math.Abs(cyMin) < pixelHeight / 2.0)
					cy = 0.0;
				for (ix = 0; ix < panelMain.Width; ix++) {
					cx = cxMin + (double )ix * pixelWidth;
					// init this go 
					/* z(i+1) = z(i)² + z(0) => │z(i+1)│ ≤ │z(i)│² + │z(0)│
					   =>  │z(i+1)│≤.5 if │z(0)│<.25=√.0625
					 */
					if ((cx<0 && (cx+.25)*(cx+.25)+cy*cy<0.25) || ((cx+1)*(cx+1)+cy*cy<0.0625) || cx*cx+cy*cy/4<0.0625) g.FillRectangle(sbBlack, ix, iy, 1, 1); //Rough fill of the interior, by a few geometric figures
					else {
						zx = 0.0;
						zy = 0.0;
						zx2 = 0.0;
						zy2 = 0.0;
						for (i = 0; i < iterationMax && ((zx2 + zy2) < er2); i++) {
							zy = zx * zy * 2.0 + cy;
							zx = zx2 - zy2 + cx;
							zx2 = zx * zx;
							zy2 = zy * zy;
						}
						if (i == iterationMax) {
							// interior, part of set, black
							// set colour to black
							g.FillRectangle(sbBlack, ix, iy, 1, 1);
						}else{
							// outside, set colour proportional to time/distance it took to converge
							// set colour not black
							//SolidBrush sbNeato = new SolidBrush(MapColor(i, zx2, zy2));
							g.FillRectangle(sbA[i], ix, iy, 1, 1);
						}
					}
				}
			}

			Cursor.Current = Cursors.Default;
		}

		private void panelMain_Paint(object sender, PaintEventArgs e)
		{
			Graphics g;

			if (isMouseDown)
			{
				Pen penYellow = new Pen(Color.ForestGreen);
				bMap = (Bitmap )bMapSaved.Clone(); // restore background, then draw new rectangle, both to the offscreen bMap
				g = Graphics.FromImage(bMap);
				g.DrawRectangle(penYellow, Math.Min(mx0,mx1), Math.Min(my0,my1), Math.Abs(mx1-mx0), Math.Abs(my1-my0));
				e.Graphics.DrawImageUnscaled(bMap, 0, 0); // copy whole thing to visible screen
			}
			else
			{
				if (doDrawMandelbrot)
				{
					g = Graphics.FromImage(bMap);
					DrawMandelbrot(ref cx0, ref cy0, ref cx1, ref cy1, g); // draw it to our background bitmap
					e.Graphics.DrawImageUnscaled(bMap, 0, 0); // display it on the panel
					bMapSaved = (Bitmap)bMap.Clone();  // save our background; the current mandelbrot image
					doDrawMandelbrot = false;
				}
				else
				{
					e.Graphics.DrawImageUnscaled(bMap, 0, 0);
				}
			}
		}

		private void panelMain_MouseDown(object sender, MouseEventArgs e)
		{
			// save where the start of the selection rect is
			isMouseDown = true;
			mx0 = e.X;
			my0 = e.Y;
			mx1 = mx0;
			my1 = my0;
		}

		private void panelMain_MouseUp(object sender, MouseEventArgs e)
		{
			// save where the end of the selection rect is at
			isMouseDown = false;
			mx1 = e.X;
			my1 = e.Y;

			if (mx1<mx0){int t=mx0;mx0=mx1;mx1=t;}
			if (my1<my0){int t=my0;my0=my1;my1=t;}
			if (mx1==mx0){mx0-=panelMain.Width /8;mx1=mx0+panelMain.Width /4;}
			if (my1==my0){my0-=panelMain.Height/8;my1=my0+panelMain.Height/4;}

			/*
			 * cx0, cy0 and cx1, cy1 are the current extent of the set
			 * mx0,my0 and mx1,my1 are the part we selected
			 * do the math to draw the selected rectangle
			 * */

			double scaleX=(cx1-cx0) / (double)panelMain.Width;
			double scaleY=(cy1-cy0) / (double)panelMain.Height;

			double tx0, tx1, ty0, ty1;
			if (e.Button == MouseButtons.Right)
			{ //Zoom out
				double fX=(mx1-mx0) / (double)panelMain.Width ;
				double fY=(my1-my0) / (double)panelMain.Height;
				tx0=-mx0/fX; tx1=tx0+ (double)panelMain.Width  / fX;
				ty0=-my0/fY; ty1=ty0+ (double)panelMain.Height / fY;
			}else{
				tx0=mx0; tx1=mx1;
				ty0=my0; ty1=my1;
			}

			cx1 = tx1 * scaleX + cx0;
			cy1 = ty1 * scaleY + cy0;
			cx0 = tx0 * scaleX + cx0;
			cy0 = ty0 * scaleY + cy0;

			doDrawMandelbrot = true;
			panelMain.Refresh(); // force mandelbrot to redraw
		}

		private void buttonReset_Click(object sender, EventArgs e)
		{
			// set the rectanlge to draw back to the whole thing
			cx0 = -2.0;
			cx1 = +0.5;
			cy0 = -1.13;
			cy1 = +1.13;
			doDrawMandelbrot = true;
			panelMain.Refresh();
		}

		private void panelMain_MouseMove(object sender, MouseEventArgs e)
		{
				double cxM = (double)e.X * (cx1 - cx0) / (double)panelMain.Width  + cx0;
				double cyM = (double)e.Y * (cy1 - cy0) / (double)panelMain.Height + cy0;
				double Dig= Math.Truncate(3-Math.Log10(cx1-cx0));
				string F="F"+Dig.ToString();
				label1.Text="x="+cxM.ToString(F)+" , y="+(-cyM).ToString(F)+"   "+Dig.ToString();			
			if (isMouseDown)
			{
				// get new coords of rect
				mx1 = e.X;
				my1 = e.Y;
				panelMain.Refresh();
			}

		}

		private void FormMandelbrot_SizeChanged(object sender, EventArgs e)
		{
			// bmap and bmap clone have to be redone to match new size of the form
			bMap.Dispose();
			bMap = new Bitmap(panelMain.Width, panelMain.Height);
		}

	}

	// this has to be at the bottom of the source file or the form designer won't work
	public class MyPanel : System.Windows.Forms.Panel
	{
		// a non-flickering panel. It doesn't draw its own background
		// if you don't do this the panel flickers like crazy when you resize the selection rectangle
		public MyPanel()
		{
			this.SetStyle(
				System.Windows.Forms.ControlStyles.UserPaint |
				System.Windows.Forms.ControlStyles.AllPaintingInWmPaint |
				System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer,
				true);
		}
	}
}