<resources>
    <string name="app_name">Randomness and Fractals</string>
    <string name="edit_message">Enter a message</string>
    <string name="button_send">Send</string>
    <string name="Randomness">Randomness</string>
    <string name="Fractals">Fractals</string>
    <string name="BBS">Blum Blum Shub</string>
    <string name="Esempio_AND">example of a non-uniform distributed algorithm</string>
    <string name="GLC">Linear congruential generator</string>
    <string name="LF">Lagged Fibonacci</string>
    <string name="RRL">Linear-feedback shift register</string>
    <string name="SET">Set Values</string>
    <string name="GEN">Generate</string>
    <string name="Draw">Draw</string>
    <string name="Fraction">Fraction</string>
    <string name="GLCDescription">The linear congruential generator is an old algorithm, that is easy to reproduce and computationally light.\n
                Its recursive formula is: X(n+1) = [ a * X(n) + c] mod m\n
                Where:\n
                \tm is the module between 0 and +infinite (in this case m = "+ M+"); \n
                \ta is the multiplier between 0 and m (in this case a = "+A+");\n
                \tc is the increment between 0 and m (in this case c = "+C+");\n
                \tX(0) is the seed between 0 and m (in this case X(0) = "+Xi+");\n
                The period of the algorithm is m, and it's full only if:\n
                \tc and m are coprime (they have as MCD 1);\n
                \ta-1 is divisible for all of m's prime factors;\n
                The linear congruential generator was used by GCC with the rand function and Java's Random class.\n
                It's not efficient and it shouldn't be used where a high degree of casualty is required or for cryptography.\n
</string>

    <string name="LFDescription">The lagged Fibonacci generator is an algorithm for pseudo-random number generation based on a generalisation of the Fibonacci sequence.\n
                From the definition of the Fibonacci sequence:\n
                the generator is defined as F(n) = [ F(n-j) @ F(n-k) ] mod m, with j between 0 and k, and k equal or less than n \n
                Where:\n
                \tF(n) is the last term of the succession\n
                \tF(n-j) and F(n-k) are any of the two previous terms of the succession\n
                \t@ is a binary operator(+,-,*,/,XOR,AND,ecc.)\n
                "In this case, it uses:\n
                \tj = "+j+"\n
                \tk = "+k+"\n
                \tn = "+n+"\n
                "Properties:\n
                \t- As all pseudo-random number generators, the lagged Fibonacci generator is a periodic function.\n
                \t- The maximum period varies depending on the operator used. In case of a sum or subtraction, the generator has the period equal to p such that\n
                \t  2^{k-1}  *  2^{m-1}\n
                \t  If it's a multiplication instead\n
                \t  2^{k-1}  *  2^{m-3}\n
                \t  The period of the multiplication is a quarter of the one of the sum.
</string>

    <string name="RRLDescription">The linear-feedback shift register is a type of shift register where the input data is produced from a linear function of the internal state.\n
                The only linear function in bit are XOR and XNOR ;\n
                meaning that it shifts register where the input bits are produced by the xor of some of the memorized bits within the registers.\n
                The bit\'s position list that influcences the next sequence is called sequence tap.\n
                The outputs that influence the inputs are called tap.\n
                A maximal LFSR produces an n-sequence (aka. it passes through all of the possible shift registers except the one that produces all zeros),\n
                unless the initial state is all zeros, in that case the exit state remains the same.\n
                The tap sequence of a LFSR can be represented as a module 2 polynomial. This means that the polinom\'s coefficients must be either 1 or 0.\n
                This is known as a retroactive polynom.\n
                Properties:\n
                \t- If (and only if) this is a primitive polynom, then the LFSR is maximal\n
                \t- The LFSR is maximal only if the tap count is even\n
                \t- The tap values of a maximal LFSR are coprime\n
                \t- There can be more than one tap sequence that makes maximal a fixed length LFSR \n
                \t- Once found the maximal tap sequence, another one can be fount using an automatic procedure: if the sequence,\n
                \t  in a n bit LFS, is [n,A,B,C], it's \"specular\" sequence is [n,n-A,n-B,n-C] (for example the sequence [32,3,2,1] has as its counterpart [32,31,30,29]).\n
                \t  Both produce a maximal LFSR.
                Properties of the exit sequence:\n
                \t- Ones and zeros follow one another (runs).\n
                \t  The exit sequence 0110100, for example, is made of five runs, each having length 1,2,1,1,2.\n
                \t  In a maximal LFSR period, there are 2^{n-1} runs (e.g., a 6 bit LFSR has 32 runs);\n
                \t  and exactly 1/2 of those runs have one bit, 1/4 have 2 bit, untli the last run of zero n-1 bits,\n
                \t  and one run of une n bits.\n
                \t- LFSR's exit sequences are deterministic: if the current state is known, the next one can be forecasted. \n
                LFSR's can be implemented in hardware, and that makes them useful in applications that reqiure a fast pseudo-rundom number generation,\n
                as in the r Direct Sequence Spread Spectrum radio technique, used in theUMTS.\n
                The GPS used LFSR to quicly send a sequence equal to high-precision relative istances,\n
                taking advantage of it's determinism: that's because you only need to transmit the used seed to the transmitter since the generated sequence will be the same on the receiver .\n

</string>

    <string name="BBSDescription">The algorithm uses four variables: q, p, n and a seed.\n
        	\tp and q are two prime numbers,\n\tn is their product, \n\tthe seed is a coprime number lower than n.\n
        	the starting value is set by the module of the seed two squared (X0 = seed ^ 2 mod n),\n
        	to find the next X values simply apply the previous formula to the current variable (X(n) = X(n-1)^2 mod n\n)
        	for each X(n) the less significant bit is taken and put into a bit vector.\n
        	The result is achieved by the conversion of the binary number found in the array\n
        	Eg: with n=5 the resulting binary number is = 10001; equal to the result = 17\n</string>

    <string name="SerpDesc">The Serpinskyâ€™s triangle undoubtedly is one of the most famous fractals, mainly because it\'s the easiest one to create\n
              To create it via chaos game you need to proceed in the following way:\n\t
              1) Pick one of the triangle vertex as the starting point;\n\t
              2) The next point will be chosen at half of the distance between the current point and one of the vertex(randomly chosen)\n
              If you want to recreate it in the non-procedural way, you have to inscribe a triangle inside the initial one.\nThis triangle has the midpoints of the initial triangle sides as vertices .\n You must repeat the procedure with the other triangles, accordingly to the recursion level chosen.\n
              An infinitely iterated Serpinsky triangle has an area of 0.\n
</string>

    <string name="TSDesc">The T-Square is another famous fractal that unlike Serpinsky\'s triangle has one condition to follow for its creation: the next chosen vertex must not be the opposite of the current chosen one.\n
              To create it via chaos game you need to proceed in the following way:\n\t
              1) Pick one of the square vertex as the starting point;\n\t
              2) Randomly choose one vertex and the starting point and put a midpoint between them which will become the next \'starting point' \n
              If you want to recreate it in the non-procedural way you need to:\n\t
              1) Pick a starting square;\n\t
              2) Add a smaller square that has a starting triangle's vertex in the centre and is half the length of the starting triangle.
              3) Repeat the procedure (and remember to follow the condition for its creation) until you have obtained the recursion level desired;\n\t
</string>

    <string name="ShurikenDesc">This shuriken-like nameless fractal can only be obtain via chaos game.\n
              To create it you need to proceed in the following way:\n\t
              1) Pick one of the square vertex as the starting point;\n\t
              1) Randomly choose one vertex and the starting point and put a midpoint between them which will become the next 'starting point'\n
              3)Condition: the next chosen vertex must not be counter-clockwise of the current chosen one\n
</string>

    <string name="ForestDesc">This fractal can be obtained only via chaos game.\n
              To create it you need to proceed in the following way:\n\t
              1) Pick one of the square vertex as the starting point;\n\t
              1) Randomly choose one vertex and the starting point and put a midpoint between them which will become the next \'starting point'\n
              Condition) The next point's value can't have a difference of one from the current point's value\n
              The values are:\n
              1\t4\n2\t3\n"+
              The following example has been created with 100 000 points\n
</string>

    <string name="QuadDesc">This fractal can only be obtained via chaos game.\n
              1)the starting shape is a square\n"+
              1) Randomly choose one vertex and the starting point and put a midpoint between them which will become the next 'starting point'\n
              Condition: the chosen point cannot be the same\n
</string>

    <string name="PentSerp">This fractal can be obtained only via chaos game and for it\'s successful creation it needs to follow one condition: the difference between the next vertex and the one previously chosen can\'t be one.\n
        To create it you need to do the following:\n\t
        1) Pick one of the pentagon vertex as the starting point;\n\t
        1) Randomly choose one vertex and the starting point and put a midpoint between them which will become the next 'starting point'\n
        The vertices' values are:\n
         \t1\t\n
        2\t\t5\n
          3\t4\n"
</string>

    <string name="HiveDesc">This fractal can be obtained only via chaos game and for it\'s successful creation it needs to follow one condition: the next vertex can\'t be the previous one.\n
        To create it you need to do the following:\n\t
        1) Pick one of the pentagon vertex as the starting point;\n\t
        1) Randomly choose one vertex and the starting point and put a midpoint between them which will become the next 'starting point'\n
</string>

    <string name="NoName">Unnamed Fractal</string>

    <string name="StarDesc">This fractal can be obtained only via chaos game and for it\'s successful creation it needs to follow one condition: the next vertex can\'t be adjacent of one of the two vertices chosen previously.\n
        To create it you need to do the following:\n\t
        1) Pick one of the pentagon vertex as the starting point;\n\t
        1) Randomly choose one vertex and the starting point and put a midpoint between them which will become the next 'starting point\n
</string>

    <string name="FernDesc">Barnsley fern is a quite peculiar fractal.\n
            It is obtainable from a set of algorithms, each having its own percentage of being chosen:\n
            1%:\n\t x = 0\n\t y = 0.16 * y\n
            7%:\n\t x = 0.2 * x - 0.26 * y\n\t y = 0.23 * x + 0.22 * y + 1.6\n
            7%\n\t x = -0.15 * x + 0.28 * y\n\t y = 0.26 * x + 0.24 * y + 0.44\n
            85%:\n\t x = 0.85 * x + 0.04 * y\n\t y = -0.04 * x + 0.85 * y + 1.6\n
            To change its shape (size, stretched, etc.) the coefficients' value has to be altered.\n
            x's range varies from 0 to 2.83, y's range varies from 0 to 9.999
</string>

    <string name="Fern">Barnsley Fern</string>

    <string name="Mandelbrot">Mandelbrot Set</string>

    <string name="MandelbrotDesc">Mandelbrot\'s set is a particular fractal.\n
            For it\'s realisation the Argand plane (aka. Complex plane) must be used.\n
            It can be created using the following function:\n
            \tz(0) = 0\n\tz(n+1) = [z(n)]^(2)+c\n
            The black dots are the ones that stop growing after n iterations,\n
            The other dots have increasing color intensity equal to their function's rapid growth.\n
            But the particular thing is what happens at the edges
</string>

    <string name="Point">dots</string>

    <string name="speed">speed</string>

</resources>